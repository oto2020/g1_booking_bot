require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');




process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:', {
    reply_markup: {
      keyboard: [
        [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true }]
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

bot.on('contact', async (msg) => {
  const chatId = msg.chat.id;
  const phone = '79782449190';//msg.contact.phone_number.replace('+', '');

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
  const sign = crypto.createHash('sha256')
    .update('phone:' + phone + ";key:" + process.env.SECRET_KEY)
    .digest('hex');

  const passTokenUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/pass_token/?phone=${phone}&sign=${sign}`;

  try {
    const passTokenResponse = await axios.get(passTokenUrl, {
      headers: {
        'Content-Type': 'application/json',
        apikey: process.env.API_KEY,
        Authorization: process.env.AUTHORIZATION
      }
    });

    if (passTokenResponse.data.result && passTokenResponse.data.data.pass_token) {
      const passToken = passTokenResponse.data.data.pass_token;

      const clientUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/client`;
      const clientResponse = await axios.get(clientUrl, {
        headers: {
          'Content-Type': 'application/json',
          apikey: process.env.API_KEY,
          Authorization: process.env.AUTHORIZATION,
          usertoken: passToken
        }
      });

      if (clientResponse.data.result) {
        const client = clientResponse.data.data;
        const id = client.id;
        const name = `${client.name} ${client.last_name}`;
        const phone = `${client.phone}`;
        const birthDate = new Date(client.birthday).toLocaleDateString("ru-RU");
        const photo = client.photo;
        const tags = client.tags.map(tag => `#${tag.title}`).join('\n');


        bot.sendMessage(chatId, `–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω:${phone}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate}\n${tags}`);
        const headers = {
          'Authorization': process.env.AUTHORIZATION,
          'apikey': process.env.API_KEY
        };

        const fileId = await downloadAndSendPhoto(chatId, photo, headers);

        if (fileId) {
          bot.sendMessage(chatId, `–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ: \`${fileId}\``, { parse_mode: 'Markdown' });
        }



        let tag = "–•–û–ß–ï–¢ –ù–ê –í–ü–¢";
        // try {
        //   await addTag(passToken, client.id, tag);
        //   await bot.sendMessage(chatId, `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: "${tag}"`);
        // } catch (e) {
        //   await bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ "${tag}"`);
        // }

        try {
          await deleteTag(passToken, client.id, tag);
          await bot.sendMessage(chatId, `–£–¥–∞–ª–µ–Ω —Ç–µ–≥ "${tag}"`);
        } catch (e) {
          console.error(e);
          await bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tag}"`);
        }


        const ticketsUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tickets`;
        const ticketsResponse = await axios.get(ticketsUrl, {
          headers: {
            'Content-Type': 'application/json',
            apikey: process.env.API_KEY,
            Authorization: process.env.AUTHORIZATION,
            usertoken: passToken
          }
        });
        function getMembershipServices(el) {
          return (el.type == 'membership' && el.service_list && el.service_list.length > 0) 
          ? '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:\n' + el.service_list.map(ss => `‚ûñ${ss.title}\n–û—Å—Ç–∞—Ç–æ–∫: ${ss.count}(${ss.count_reserves})`).join('\n') + '\n'
          : '';
        }
        function getEndDate(el) {
          return (el.end_date) ? '(–¥–æ ' + new Date(el.end_date).toLocaleDateString("ru-RU") + ')\n' : '';
        }
        function getPackageCount(el) {
          return (el.type == 'package' && el.count) ? `–û—Å—Ç–∞—Ç–æ–∫: ${el.count}\n` : '';
        }
        if (ticketsResponse.data) {
          let txt = ticketsResponse.data.data.map(el=>`${translateStatus(el.status)}: ${el.title}\n${getEndDate(el)}${getPackageCount(el)}${getMembershipServices(el)}`).join('\n');
          bot.sendMessage(chatId, txt);
        }


      } else {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
      }
    } else {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
    console.error(error);
  }
});


function translateStatus(status) {
  const translations = {
    "active": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
    "not_active": "üí∏ –ù–µ –∞–∫—Ç–∏–≤–Ω–æ",
    "frozen": "üü†–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ",
    "locked": "üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    "closed": "‚ùå –ó–∞–∫—Ä—ã—Ç–æ"
  };

  return translations[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";
}

async function addTag(userToken, clientId, tag) {
  // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
  const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag`;
  await axios.post(tagUrl, {
    tag: tag,
    client_id: clientId
  }, {
    headers: {
      'Content-Type': 'application/json',
      apikey: process.env.API_KEY,
      Authorization: process.env.AUTHORIZATION,
      usertoken: userToken
    }
  });
}

async function deleteTag(userToken, clientId, tag) {
  // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
  const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag?tag=${tag}&client_id=${clientId}`;
  await axios.delete(tagUrl, {
    headers: {
      'Content-Type': 'application/json',
      apikey: process.env.API_KEY,
      Authorization: process.env.AUTHORIZATION,
      usertoken: userToken
    }
  });
}

async function downloadAndSendPhoto(chatId, photoUrl, headers) {
  try {
    const response = await axios.get(photoUrl, {
      headers,
      responseType: 'arraybuffer'
    });

    const filePath = path.join(__dirname, 'photo.jpg');
    fs.writeFileSync(filePath, response.data);

    const sentMessage = await bot.sendPhoto(chatId, filePath);
    const fileId = sentMessage.photo[sentMessage.photo.length - 1].file_id; // –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ

    console.log('Photo file_id:', fileId); // –í—ã–≤–æ–¥–∏–º file_id –≤ –∫–æ–Ω—Å–æ–ª—å

    fs.unlinkSync(filePath); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

    return fileId;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
    bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.');
    return null;
  }
}